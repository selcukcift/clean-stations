generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Assembly {
  AssemblyID                                                     String              @id @unique
  name                                                           String
  type                                                           AssemblyType
  categoryCode                                                   String?
  subcategoryCode                                                String?
  workInstructionId                                              String?
  qrData                                                         String?
  kitComponentsJson                                              String?
  createdAt                                                      DateTime            @default(now())
  updatedAt                                                      DateTime
  revision                                                       String              @default("1")
  customAttributes                                               Json?
  isOrderable                                                    Boolean             @default(false)
  AssemblyComponent_AssemblyComponent_childAssemblyIdToAssembly  AssemblyComponent[] @relation("AssemblyComponent_childAssemblyIdToAssembly")
  AssemblyComponent_AssemblyComponent_parentAssemblyIdToAssembly AssemblyComponent[] @relation("AssemblyComponent_parentAssemblyIdToAssembly")
  Subcategory                                                    Subcategory[]       @relation("SubcategoryAssemblies")
}

model AssemblyComponent {
  id                                                    Int       @id @default(autoincrement())
  quantity                                              Int
  notes                                                 String?
  createdAt                                             DateTime  @default(now())
  updatedAt                                             DateTime
  parentAssemblyId                                      String
  childPartId                                           String?
  childAssemblyId                                       String?
  Assembly_AssemblyComponent_childAssemblyIdToAssembly  Assembly? @relation("AssemblyComponent_childAssemblyIdToAssembly", fields: [childAssemblyId], references: [AssemblyID])
  Part                                                  Part?     @relation(fields: [childPartId], references: [PartID])
  Assembly_AssemblyComponent_parentAssemblyIdToAssembly Assembly  @relation("AssemblyComponent_parentAssemblyIdToAssembly", fields: [parentAssemblyId], references: [AssemblyID])
}

model AssociatedDocument {
  id         String   @id
  docName    String
  docURL     String
  uploadedBy String
  timestamp  DateTime @default(now())
  docType    String?
  orderId    String
  Order      Order    @relation(fields: [orderId], references: [id])
}

model AuditLog {
  id         String   @id
  userId     String?
  action     String
  entityType String
  entityId   String
  oldValues  Json?
  newValues  Json?
  ipAddress  String?
  userAgent  String?
  sessionId  String?
  createdAt  DateTime @default(now())
  User       User?    @relation(fields: [userId], references: [id])

  @@index([entityType, entityId])
  @@index([userId, createdAt])
}

model BasinConfiguration {
  id                  String   @id
  buildNumber         String
  basinTypeId         String
  basinSizePartNumber String?
  basinCount          Int      @default(1)
  addonIds            String[]
  orderId             String
  customDepth         Float?
  customLength        Float?
  customWidth         Float?
  Order               Order    @relation(fields: [orderId], references: [id])
}

model Bom {
  id          String    @id
  buildNumber String?
  generatedAt DateTime  @default(now())
  orderId     String
  Order       Order     @relation(fields: [orderId], references: [id])
  BomItem     BomItem[]
}

model BomItem {
  id                 String    @id
  partIdOrAssemblyId String
  name               String
  quantity           Int
  itemType           String
  category           String?
  isCustom           Boolean   @default(false)
  parentId           String?
  bomId              String
  Bom                Bom       @relation(fields: [bomId], references: [id])
  BomItem            BomItem?  @relation("BomItemToBomItem", fields: [parentId], references: [id])
  other_BomItem      BomItem[] @relation("BomItemToBomItem")
}

model Category {
  categoryId  String        @id @unique
  name        String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  Subcategory Subcategory[]
}

model FaucetConfiguration {
  id              String  @id
  buildNumber     String
  faucetTypeId    String
  faucetQuantity  Int     @default(1)
  faucetPlacement String?
  orderId         String
  Order           Order   @relation(fields: [orderId], references: [id])
}

model FileUpload {
  id                          String                        @id
  filename                    String
  originalName                String
  mimeType                    String
  size                        Int
  path                        String
  uploadedById                String
  isPublic                    Boolean                       @default(false)
  metadata                    Json?
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime
  User                        User                          @relation(fields: [uploadedById], references: [id])
  OrderQcItemResult           OrderQcItemResult[]
  QcItemResultMediaAttachment QcItemResultMediaAttachment[]

  @@index([uploadedById, createdAt])
}

model InventoryItem {
  id                   String                 @id
  partId               String?
  assemblyId           String?
  location             String?
  quantityOnHand       Int                    @default(0)
  quantityReserved     Int                    @default(0)
  quantityAvailable    Int                    @default(0)
  reorderPoint         Int?
  maxStock             Int?
  lastUpdated          DateTime               @default(now())
  updatedById          String
  Part                 Part?                  @relation(fields: [partId], references: [PartID], onDelete: Cascade)
  User                 User                   @relation(fields: [updatedById], references: [id])
  InventoryTransaction InventoryTransaction[]

  @@unique([partId, assemblyId, location])
  @@index([partId, assemblyId])
}

model InventoryTransaction {
  id              String                   @id
  inventoryItemId String
  type            InventoryTransactionType
  quantity        Int
  reason          String?
  orderId         String?
  taskId          String?
  performedById   String
  createdAt       DateTime                 @default(now())
  InventoryItem   InventoryItem            @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)
  Order           Order?                   @relation(fields: [orderId], references: [id])
  User            User                     @relation(fields: [performedById], references: [id])
  Task            Task?                    @relation(fields: [taskId], references: [id])

  @@index([inventoryItemId, createdAt])
}

model Notification {
  id          String   @id
  message     String
  linkToOrder String?
  isRead      Boolean  @default(false)
  type        String?
  createdAt   DateTime @default(now())
  recipientId String
  Order       Order?   @relation(fields: [linkToOrder], references: [id])
  User        User     @relation(fields: [recipientId], references: [id])
}

model NotificationPreference {
  id               String                @id
  userId           String
  notificationType NotificationType
  inAppEnabled     Boolean               @default(true)
  emailEnabled     Boolean               @default(false)
  frequency        NotificationFrequency @default(IMMEDIATE)
  quietHoursStart  Int?
  quietHoursEnd    Int?
  emailAddress     String?
  isActive         Boolean               @default(true)
  createdAt        DateTime              @default(now())
  updatedAt        DateTime
  User             User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, notificationType])
  @@index([userId, notificationType])
}

model Order {
  id                   String                 @id
  poNumber             String                 @unique
  buildNumbers         String[]
  customerName         String
  projectName          String?
  salesPerson          String
  wantDate             DateTime
  notes                String?
  language             String                 @default("EN")
  orderStatus          OrderStatus            @default(ORDER_CREATED)
  currentAssignee      String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  createdById          String
  AssociatedDocument   AssociatedDocument[]
  BasinConfiguration   BasinConfiguration[]
  Bom                  Bom[]
  FaucetConfiguration  FaucetConfiguration[]
  InventoryTransaction InventoryTransaction[]
  Notification         Notification[]
  User                 User                   @relation(fields: [createdById], references: [id])
  OrderComment         OrderComment[]
  OrderHistoryLog      OrderHistoryLog[]
  OrderQcResult        OrderQcResult[]
  SelectedAccessory    SelectedAccessory[]
  SinkConfiguration    SinkConfiguration[]
  SprayerConfiguration SprayerConfiguration[]
  Task                 Task[]

  @@unique([poNumber, buildNumbers])
}

model OrderComment {
  id                                 String               @id
  orderId                            String
  userId                             String
  content                            String
  isInternal                         Boolean              @default(false)
  priority                           OrderCommentPriority @default(NORMAL)
  category                           String?
  isResolved                         Boolean              @default(false)
  resolvedAt                         DateTime?
  resolvedBy                         String?
  mentions                           String[]             @default([])
  attachments                        String[]             @default([])
  createdAt                          DateTime             @default(now())
  updatedAt                          DateTime
  Order                              Order                @relation(fields: [orderId], references: [id], onDelete: Cascade)
  User_OrderComment_resolvedByToUser User?                @relation("OrderComment_resolvedByToUser", fields: [resolvedBy], references: [id], onDelete: NoAction)
  User_OrderComment_userIdToUser     User                 @relation("OrderComment_userIdToUser", fields: [userId], references: [id], onDelete: NoAction)

  @@index([isResolved, priority])
  @@index([orderId, createdAt])
  @@index([userId, createdAt])
}

model OrderHistoryLog {
  id        String   @id
  timestamp DateTime @default(now())
  action    String
  oldStatus String?
  newStatus String?
  notes     String?
  orderId   String
  userId    String
  Order     Order    @relation(fields: [orderId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model OrderQcItemResult {
  id                          String                        @id
  orderQcResultId             String
  qcFormTemplateItemId        String
  resultValue                 String?
  isConformant                Boolean?
  notes                       String?
  attachedDocumentId          String?
  FileUpload                  FileUpload?                   @relation(fields: [attachedDocumentId], references: [id])
  OrderQcResult               OrderQcResult                 @relation(fields: [orderQcResultId], references: [id], onDelete: Cascade)
  QcFormTemplateItem          QcFormTemplateItem            @relation(fields: [qcFormTemplateItemId], references: [id])
  QcItemResultMediaAttachment QcItemResultMediaAttachment[]
}

model OrderQcResult {
  id                String              @id
  orderId           String
  qcFormTemplateId  String
  qcPerformedById   String
  qcTimestamp       DateTime            @default(now())
  overallStatus     QcStatus            @default(PENDING)
  notes             String?
  OrderQcItemResult OrderQcItemResult[]
  Order             Order               @relation(fields: [orderId], references: [id])
  QcFormTemplate    QcFormTemplate      @relation(fields: [qcFormTemplateId], references: [id])
  User              User                @relation(fields: [qcPerformedById], references: [id])

  @@unique([orderId, qcFormTemplateId])
}

model Part {
  PartID                 String              @id @unique
  name                   String
  manufacturerPartNumber String?
  type                   PartType
  status                 Status
  photoURL               String?
  technicalDrawingURL    String?
  createdAt              DateTime            @default(now())
  updatedAt              DateTime
  revision               String              @default("1")
  customAttributes       Json?
  AssemblyComponent      AssemblyComponent[]
  InventoryItem          InventoryItem[]
  ServiceOrderItem       ServiceOrderItem[]
}

model QcFormTemplate {
  id                     String               @id
  name                   String
  version                String               @default("1.0")
  description            String?
  isActive               Boolean              @default(true)
  appliesToProductFamily String?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime
  OrderQcResult          OrderQcResult[]
  QcFormTemplateItem     QcFormTemplateItem[]
}

model QcFormTemplateItem {
  id                     String              @id
  templateId             String
  section                String
  checklistItem          String
  itemType               QcItemType
  options                Json?
  expectedValue          String?
  order                  Int
  isRequired             Boolean             @default(true)
  applicabilityCondition String?
  defaultValue           String?
  notesPrompt            String?
  relatedAssemblyId      String?
  relatedPartNumber      String?
  repeatPer              String?
  OrderQcItemResult      OrderQcItemResult[]
  QcFormTemplate         QcFormTemplate      @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model QcItemResultMediaAttachment {
  id                  String            @id
  orderQcItemResultId String
  fileUploadId        String
  createdAt           DateTime          @default(now())
  FileUpload          FileUpload        @relation(fields: [fileUploadId], references: [id])
  OrderQcItemResult   OrderQcItemResult @relation(fields: [orderQcItemResultId], references: [id], onDelete: Cascade)

  @@index([fileUploadId])
  @@index([orderQcItemResultId])
}

model SelectedAccessory {
  id          String @id
  buildNumber String
  assemblyId  String
  quantity    Int    @default(1)
  orderId     String
  Order       Order  @relation(fields: [orderId], references: [id])
}

model ServiceOrder {
  id               String             @id
  requestedById    String
  requestTimestamp DateTime           @default(now())
  status           ServiceOrderStatus @default(PENDING_APPROVAL)
  notes            String?
  procurementNotes String?
  updatedAt        DateTime
  User             User               @relation(fields: [requestedById], references: [id])
  ServiceOrderItem ServiceOrderItem[]
}

model ServiceOrderItem {
  id                String       @id
  serviceOrderId    String
  partId            String
  quantityRequested Int
  quantityApproved  Int?
  notes             String?
  Part              Part         @relation(fields: [partId], references: [PartID])
  ServiceOrder      ServiceOrder @relation(fields: [serviceOrderId], references: [id], onDelete: Cascade)
}

model SinkConfiguration {
  id                        String   @id
  buildNumber               String
  sinkModelId               String
  width                     Int?
  length                    Int?
  legsTypeId                String?
  feetTypeId                String?
  workflowDirection         String?
  pegboard                  Boolean  @default(false)
  pegboardTypeId            String?
  pegboardColorId           String?
  hasDrawersAndCompartments Boolean  @default(false)
  drawersAndCompartments    String[] @default([])
  controlBoxId              String?
  orderId                   String
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime
  Order                     Order    @relation(fields: [orderId], references: [id])
}

model SprayerConfiguration {
  id               String   @id
  buildNumber      String
  hasSpray         Boolean  @default(false)
  sprayerTypeIds   String[]
  sprayerQuantity  Int      @default(0)
  sprayerLocations String[]
  orderId          String
  Order            Order    @relation(fields: [orderId], references: [id])
}

model Subcategory {
  subcategoryId String     @id @unique
  name          String
  description   String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime
  categoryId    String
  Category      Category   @relation(fields: [categoryId], references: [categoryId])
  Assembly      Assembly[] @relation("SubcategoryAssemblies")
}

model SystemNotification {
  id        String               @id
  userId    String?
  type      NotificationType
  title     String
  message   String
  data      Json?
  isRead    Boolean              @default(false)
  priority  NotificationPriority @default(NORMAL)
  expiresAt DateTime?
  createdAt DateTime             @default(now())
  updatedAt DateTime
  User      User?                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([type, createdAt])
  @@index([userId, isRead])
}

model Task {
  id                                              String                 @id
  orderId                                         String
  workInstructionId                               String?
  title                                           String
  description                                     String?
  status                                          TaskStatus             @default(PENDING)
  priority                                        TaskPriority           @default(MEDIUM)
  assignedToId                                    String?
  estimatedMinutes                                Int?
  actualMinutes                                   Int?
  startedAt                                       DateTime?
  completedAt                                     DateTime?
  createdAt                                       DateTime               @default(now())
  updatedAt                                       DateTime
  InventoryTransaction                            InventoryTransaction[]
  User                                            User?                  @relation(fields: [assignedToId], references: [id])
  Order                                           Order                  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  WorkInstruction                                 WorkInstruction?       @relation(fields: [workInstructionId], references: [id])
  TaskDependency_TaskDependency_dependsOnIdToTask TaskDependency[]       @relation("TaskDependency_dependsOnIdToTask")
  TaskDependency_TaskDependency_taskIdToTask      TaskDependency[]       @relation("TaskDependency_taskIdToTask")
  TaskNote                                        TaskNote[]
  TaskTool                                        TaskTool[]

  @@index([assignedToId, status])
  @@index([orderId, status])
  @@index([status, priority])
}

model TaskDependency {
  id                                    String   @id
  taskId                                String
  dependsOnId                           String
  createdAt                             DateTime @default(now())
  Task_TaskDependency_dependsOnIdToTask Task     @relation("TaskDependency_dependsOnIdToTask", fields: [dependsOnId], references: [id], onDelete: Cascade)
  Task_TaskDependency_taskIdToTask      Task     @relation("TaskDependency_taskIdToTask", fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, dependsOnId])
  @@index([taskId, dependsOnId])
}

model TaskNote {
  id        String   @id
  taskId    String
  authorId  String
  content   String
  createdAt DateTime @default(now())
  User      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  Task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId, createdAt])
}

model TaskTool {
  id                  String               @id
  taskId              String?
  stepId              String?
  toolId              String
  WorkInstructionStep WorkInstructionStep? @relation(fields: [stepId], references: [id], onDelete: Cascade)
  Task                Task?                @relation(fields: [taskId], references: [id], onDelete: Cascade)
  Tool                Tool                 @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@unique([stepId, toolId])
  @@unique([taskId, toolId])
}

model Tool {
  id          String     @id
  name        String
  description String?
  category    String
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime
  TaskTool    TaskTool[]
}

model User {
  id                                         String                   @id
  username                                   String                   @unique
  email                                      String                   @unique
  passwordHash                               String
  fullName                                   String
  role                                       UserRole
  isActive                                   Boolean                  @default(true)
  initials                                   String
  createdAt                                  DateTime                 @default(now())
  updatedAt                                  DateTime
  lastLoginAt                                DateTime?
  lockedUntil                                DateTime?
  loginAttempts                              Int                      @default(0)
  assignedTaskIds                            String[]                 @default([])
  AuditLog                                   AuditLog[]
  FileUpload                                 FileUpload[]
  InventoryItem                              InventoryItem[]
  InventoryTransaction                       InventoryTransaction[]
  Notification                               Notification[]
  NotificationPreference                     NotificationPreference[]
  Order                                      Order[]
  OrderComment_OrderComment_resolvedByToUser OrderComment[]           @relation("OrderComment_resolvedByToUser")
  OrderComment_OrderComment_userIdToUser     OrderComment[]           @relation("OrderComment_userIdToUser")
  OrderHistoryLog                            OrderHistoryLog[]
  OrderQcResult                              OrderQcResult[]
  ServiceOrder                               ServiceOrder[]
  SystemNotification                         SystemNotification[]
  Task                                       Task[]
  TaskNote                                   TaskNote[]
}

model WorkInstruction {
  id                  String                @id
  title               String
  description         String?
  assemblyId          String?
  version             String                @default("1.0")
  isActive            Boolean               @default(true)
  estimatedMinutes    Int?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  Task                Task[]
  WorkInstructionStep WorkInstructionStep[]
}

model WorkInstructionStep {
  id                String          @id
  workInstructionId String
  stepNumber        Int
  title             String
  description       String
  estimatedMinutes  Int?
  images            String[]
  videos            String[]
  checkpoints       String[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime
  TaskTool          TaskTool[]
  WorkInstruction   WorkInstruction @relation(fields: [workInstructionId], references: [id], onDelete: Cascade)

  @@unique([workInstructionId, stepNumber])
  @@index([workInstructionId, stepNumber])
}

enum AssemblyType {
  SIMPLE
  COMPLEX
  SERVICE_PART
  KIT
}

enum InventoryTransactionType {
  INCOMING
  OUTGOING
  ADJUSTMENT
  RESERVED
  RELEASED
}

enum NotificationFrequency {
  IMMEDIATE
  HOURLY
  DAILY
  WEEKLY
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum NotificationType {
  ORDER_STATUS_CHANGE
  TASK_ASSIGNMENT
  QC_APPROVAL_REQUIRED
  ASSEMBLY_MILESTONE
  SERVICE_REQUEST
  SYSTEM_ALERT
  INVENTORY_LOW
  DEADLINE_APPROACHING
}

enum OrderCommentPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum OrderStatus {
  ORDER_CREATED
  PARTS_SENT_WAITING_ARRIVAL
  READY_FOR_PRE_QC
  READY_FOR_PRODUCTION
  TESTING_COMPLETE
  PACKAGING_COMPLETE
  READY_FOR_FINAL_QC
  READY_FOR_SHIP
  SHIPPED
}

enum PartType {
  COMPONENT
  MATERIAL
}

enum QcItemType {
  PASS_FAIL
  TEXT_INPUT
  NUMERIC_INPUT
  SINGLE_SELECT
  MULTI_SELECT
  DATE_INPUT
  CHECKBOX
}

enum QcStatus {
  PENDING
  IN_PROGRESS
  PASSED
  FAILED
  REQUIRES_REVIEW
}

enum ServiceOrderStatus {
  PENDING_APPROVAL
  APPROVED
  REJECTED
  ORDERED
  RECEIVED
}

enum Status {
  ACTIVE
  INACTIVE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  BLOCKED
  CANCELLED
}

enum UserRole {
  ADMIN
  PRODUCTION_COORDINATOR
  PROCUREMENT_SPECIALIST
  QC_PERSON
  ASSEMBLER
  SERVICE_DEPARTMENT
}
