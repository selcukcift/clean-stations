generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Part {
  partId                 String               @id @unique @map("PartID")
  name                   String
  manufacturerPartNumber String?
  type                   PartType
  status                 Status
  photoURL               String?
  technicalDrawingURL    String?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  assemblyComponents     AssemblyComponent[]
  serviceOrderItems      ServiceOrderItem[]   @relation("PartServiceOrders")
}

model Assembly {
  assemblyId        String              @id @unique @map("AssemblyID")
  name              String
  type              AssemblyType
  categoryCode      String?
  subcategoryCode   String?
  workInstructionId String?
  qrData            String?
  kitComponentsJson String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  childOfAssemblies AssemblyComponent[] @relation("ChildComponents")
  components        AssemblyComponent[] @relation("ParentComponents")
  subcategories     Subcategory[]       @relation("SubcategoryAssemblies")
}

model AssemblyComponent {
  id               Int       @id @default(autoincrement())
  quantity         Int
  notes            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  parentAssemblyId String
  childPartId      String?
  childAssemblyId  String?
  childAssembly    Assembly? @relation("ChildComponents", fields: [childAssemblyId], references: [assemblyId])
  childPart        Part?     @relation(fields: [childPartId], references: [partId])
  parentAssembly   Assembly  @relation("ParentComponents", fields: [parentAssemblyId], references: [assemblyId])
}

model Category {
  categoryId    String        @id @unique
  name          String
  description   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  subcategories Subcategory[]
}

model Subcategory {
  subcategoryId String     @id @unique
  name          String
  description   String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  categoryId    String
  category      Category   @relation(fields: [categoryId], references: [categoryId])
  assemblies    Assembly[] @relation("SubcategoryAssemblies")
}

model User {
  id            String            @id @default(cuid())
  username      String            @unique
  email         String            @unique
  passwordHash  String
  fullName      String
  role          UserRole
  isActive      Boolean           @default(true)
  initials      String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  notifications Notification[]    @relation("UserNotifications")
  createdOrders Order[]           @relation("OrderCreatedBy")
  historyLogs   OrderHistoryLog[] @relation("UserHistoryLogs")
  qcResults     OrderQcResult[]   @relation("UserQcResults")
  serviceOrders ServiceOrder[]    @relation("UserServiceOrders")
}

model Order {
  id                    String                 @id @default(cuid())
  poNumber              String                 @unique
  buildNumbers          String[]
  customerName          String
  projectName           String?
  salesPerson           String
  wantDate              DateTime
  notes                 String?
  language              String                 @default("EN")
  orderStatus           OrderStatus            @default(ORDER_CREATED)
  currentAssignee       String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  createdById           String
  associatedDocuments   AssociatedDocument[]
  basinConfigurations   BasinConfiguration[]
  generatedBoms         Bom[]                  @relation("OrderBoms")
  faucetConfigurations  FaucetConfiguration[]
  notifications         Notification[]
  createdBy             User                   @relation("OrderCreatedBy", fields: [createdById], references: [id])
  historyLogs           OrderHistoryLog[]
  qcResults             OrderQcResult[]
  selectedAccessories   SelectedAccessory[]
  sprayerConfigurations SprayerConfiguration[]

  @@unique([poNumber, buildNumbers])
}

model BasinConfiguration {
  id                  String   @id @default(cuid())
  buildNumber         String
  basinTypeId         String
  basinSizePartNumber String?
  basinCount          Int      @default(1)
  addonIds            String[]
  orderId             String
  order               Order    @relation(fields: [orderId], references: [id])
}

model FaucetConfiguration {
  id              String  @id @default(cuid())
  buildNumber     String
  faucetTypeId    String
  faucetQuantity  Int     @default(1)
  faucetPlacement String?
  orderId         String
  order           Order   @relation(fields: [orderId], references: [id])
}

model SprayerConfiguration {
  id               String   @id @default(cuid())
  buildNumber      String
  hasSpray         Boolean  @default(false)
  sprayerTypeIds   String[]
  sprayerQuantity  Int      @default(0)
  sprayerLocations String[]
  orderId          String
  order            Order    @relation(fields: [orderId], references: [id])
}

model SelectedAccessory {
  id          String @id @default(cuid())
  buildNumber String
  assemblyId  String
  quantity    Int    @default(1)
  orderId     String
  order       Order  @relation(fields: [orderId], references: [id])
}

model AssociatedDocument {
  id         String   @id @default(cuid())
  docName    String
  docURL     String
  uploadedBy String
  timestamp  DateTime @default(now())
  docType    String?
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
}

model Bom {
  id          String    @id @default(cuid())
  buildNumber String?
  generatedAt DateTime  @default(now())
  orderId     String
  order       Order     @relation("OrderBoms", fields: [orderId], references: [id])
  bomItems    BomItem[]
}

model BomItem {
  id                 String    @id @default(cuid())
  partIdOrAssemblyId String
  name               String
  quantity           Int
  itemType           String
  category           String?
  isCustom           Boolean   @default(false)
  parentId           String?
  bomId              String
  bom                Bom       @relation(fields: [bomId], references: [id])
  parent             BomItem?  @relation("ParentChildBomItem", fields: [parentId], references: [id])
  children           BomItem[] @relation("ParentChildBomItem")
}

model OrderHistoryLog {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  action    String
  oldStatus String?
  newStatus String?
  notes     String?
  orderId   String
  userId    String
  order     Order    @relation(fields: [orderId], references: [id])
  user      User     @relation("UserHistoryLogs", fields: [userId], references: [id])
}

model Notification {
  id          String   @id @default(cuid())
  message     String
  linkToOrder String?
  isRead      Boolean  @default(false)
  type        String?
  createdAt   DateTime @default(now())
  recipientId String
  order       Order?   @relation(fields: [linkToOrder], references: [id])
  recipient   User     @relation("UserNotifications", fields: [recipientId], references: [id])
}

model QcFormTemplate {
  id                     String               @id @default(cuid())
  name                   String
  version                String               @default("1.0")
  description            String?
  isActive               Boolean              @default(true)
  appliesToProductFamily String?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  orderQcResults         OrderQcResult[]
  items                  QcFormTemplateItem[]
}

model QcFormTemplateItem {
  id            String              @id @default(cuid())
  templateId    String
  section       String
  checklistItem String
  itemType      QcItemType
  options       Json?
  expectedValue String?
  order         Int
  isRequired    Boolean             @default(true)
  itemResults   OrderQcItemResult[]
  template      QcFormTemplate      @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model OrderQcResult {
  id               String              @id @default(cuid())
  orderId          String
  qcFormTemplateId String
  qcPerformedById  String
  qcTimestamp      DateTime            @default(now())
  overallStatus    QcStatus            @default(PENDING)
  notes            String?
  itemResults      OrderQcItemResult[]
  order            Order               @relation(fields: [orderId], references: [id])
  qcFormTemplate   QcFormTemplate      @relation(fields: [qcFormTemplateId], references: [id])
  qcPerformedBy    User                @relation("UserQcResults", fields: [qcPerformedById], references: [id])

  @@unique([orderId, qcFormTemplateId])
}

model OrderQcItemResult {
  id                   String             @id @default(cuid())
  orderQcResultId      String
  qcFormTemplateItemId String
  resultValue          String?
  isConformant         Boolean?
  notes                String?
  orderQcResult        OrderQcResult      @relation(fields: [orderQcResultId], references: [id], onDelete: Cascade)
  qcFormTemplateItem   QcFormTemplateItem @relation(fields: [qcFormTemplateItemId], references: [id])
}

enum PartType {
  COMPONENT
  MATERIAL
}

enum Status {
  ACTIVE
  INACTIVE
}

enum AssemblyType {
  SIMPLE
  COMPLEX
  SERVICE_PART
  KIT
}

enum UserRole {
  ADMIN
  PRODUCTION_COORDINATOR
  PROCUREMENT_SPECIALIST
  QC_PERSON
  ASSEMBLER
  SERVICE_DEPARTMENT
}

enum OrderStatus {
  ORDER_CREATED
  PARTS_SENT_WAITING_ARRIVAL
  READY_FOR_PRE_QC
  READY_FOR_PRODUCTION
  TESTING_COMPLETE
  PACKAGING_COMPLETE
  READY_FOR_FINAL_QC
  READY_FOR_SHIP
  SHIPPED
}

enum QcItemType {
  PASS_FAIL
  TEXT_INPUT
  NUMERIC_INPUT
  SINGLE_SELECT
  MULTI_SELECT
  DATE_INPUT
  CHECKBOX
}

enum QcStatus {
  PENDING
  IN_PROGRESS
  PASSED
  FAILED
  REQUIRES_REVIEW
}

model ServiceOrder {
  id                    String              @id @default(cuid())
  requestedById         String
  requestTimestamp      DateTime            @default(now())
  status                ServiceOrderStatus  @default(PENDING_APPROVAL)
  notes                 String?
  procurementNotes      String?
  updatedAt             DateTime            @updatedAt
  
  // Relations
  requestedBy           User                @relation("UserServiceOrders", fields: [requestedById], references: [id])
  items                 ServiceOrderItem[]
}

model ServiceOrderItem {
  id                    String        @id @default(cuid())
  serviceOrderId        String
  partId                String  
  quantityRequested     Int
  quantityApproved      Int?
  notes                 String?
  
  // Relations
  serviceOrder          ServiceOrder  @relation(fields: [serviceOrderId], references: [id], onDelete: Cascade)
  part                  Part          @relation("PartServiceOrders", fields: [partId], references: [partId])
}

enum ServiceOrderStatus {
  PENDING_APPROVAL
  APPROVED
  REJECTED
  ORDERED
  RECEIVED
}
